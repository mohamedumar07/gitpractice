- saving history of our project and go back to the date we want, when the software was working fine.

- collaborating with others

 - git allows us to maintain the project, its history, who made the change and where

 - GitHub allows us to host the git repository.

All of the history are stored in another folder, that git provides us. It's called as git repo, otherwise .git

How to know what changes are made to the project that hasn't saved yet to the history.
=>git status to check the status of the files in the project folder whether they are kept track of or not

=> git add <filename> to add all the untracked files to the staging area.

=> git commit -m <message> Recording changes to the repository.

=> git restore --staged <filename> remove the file from the staging area.

History of all the commits that were made -> git log

to go back to the commit we want and remove previous commits, we need to use "git reset <hashcode of the commit>"

git stash -> adds the modified content to backstage

git stash pop -> brings from back stage area to the non-staged area.

git stash clear -> cleans all the history in the back stage


git remote add origin <url> -> remote means working with URL, add means adding a new url, origin means the url that we are going to add. 

git remote -v -> shows all the folder that are attached to the folder.

git push origin master -> to push the changes to the master branch.


never commit on the main branch, cause that branch is used by the users.

Always create separate branches to add our changes, once they are all finalized we can add it to the main.


HEAD is a pointer which says all the commits we make added to that HEAD where it is pointing to a branch.


git branch "branch name" -> creates a new branch

git checkout <branch name> -? sets the pointer header to this branch

git merge <branch name> -> merges the branch to the main branch


Fork -> make a copy of a project into our own account. Once its in our own account, we can do whatever we want with it.


git clone <url> -> clones the project into our system.

upstream -> from where we have forked the project, that is called upstream url by convention.

git remote add upstream <url>-> adding the origin of url where we have forked the project from

When we create our own copy, and the changes that we make, to be visible in the main project, we request it via pull request. People will review it and then merge it to their code base.


We request a pull request in order to merge our code into the main branch.

When we create a pull request, the owner of the main will get the notification.

Then they will merge the code to the main.

For every bug we are working on, create a new pull request.

If a branch already has one pull request, all the changes will be associated to that pull request.

If a branch already has one pull request, it wont allow us to create a new pull request.


create a new branch for new feature

force push, if the remote and local commits dont match, using -f

matching out fork with the main project folder.

   - checkout to the main branch

   - fetching all the commits using git fetch --all --prune

   - reset the main branch of our main to that of the upstream by 
using git reset --hard upstream/main

   - then push it to the origin master.


git pull upstream main  -> same as above commands.


Whenever we create new branch, need to ensure the master branch is upto date.

To merge all commits -> git rebase -i <hashcode> (hashcode of the previous one)

use --hard to reset


Merge Conflicts ->  When there are more than one change, git gets confused, it will ask us for help.


